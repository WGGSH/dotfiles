# カラースキーム集
# [[plugins]]
# repo = 'flazz/vim-colorschemes'

# 今使ってるカラースキーム
[[plugins]]
repo = 'tomasiser/vim-code-dark'

# Airline
## 本体
[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline/vim-airline-themes', 'tpope/vim-fugitive','xero/nord-vim-mod']
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#branch#enabled = 1
if has ('win32')
  let g:airline_theme = 'nord'
else
  let g:airline_theme = 'codedark'
endif
nmap <C-j> <Plug>AirlineSelectPrevTab
nmap <C-k> <Plug>AirlineSelectNextTab
imap <C-j> <Esc><Plug>AirlineSelectPrevTab
imap <C-k> <Esc><Plug>AirlineSelectNextTab
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline#extensions#default#layout = [
  \ [ 'a', 'b' ,'x' ],
  \ [ 'c', 'y', 'z']
  \ ]
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_left_sep= ''
let g:airline_left_alt_sep= ''
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
'''

## テーマ
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

## nord テーマ
[[plugins]]
# repo = 'arcticicestudio/nord-vim'
repo = 'xero/nord-vim-mod'

## git ブランチ
[[plugins]]
repo = 'tpope/vim-fugitive'

# Processing用プラグイン
[[plugins]]
repo = 'sophacles/vim-processing'
on_ft = ["pde"]

# 自動で閉じ括弧をつける
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

# 不要な空白の強調表示
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

# インデントを見やすくする
[[plugins]]
repo = 'Yggdroot/indentLine'

# コメントの簡易挿入
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
let g:tcomment_mapleader1 = '<C-\>'
'''

# Defx: ファイラー
## 本体
[[plugins]]
repo ='Shougo/defx.nvim'
depends = ['defx-icons']
on_cmd='Defx'
hook_add='''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
nnoremap <silent><C-e> :<C-u>Defx -split=vertical -winwidth=40 -direction=botright<CR>
call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ })
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  " nnoremap <silent><buffer><expr> <CR>
  " \ defx#do_action('open')
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('drop')
  " nnoremap <silent><buffer><expr> c
  " \ defx#do_action('copy')
  " nnoremap <silent><buffer><expr> m
  " \ defx#do_action('move')
  " nnoremap <silent><buffer><expr> p
  " \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  " nnoremap <silent><buffer><expr> D
  " \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr>
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'h'
  nnoremap <silent><buffer><expr> t
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
  nnoremap <silent><buffer><expr> s
        \ defx#do_action('open', 'vsplit')
endfunction
'''

## アイコン
[[plugins]]
repo = 'kristijanhusak/defx-icons'

# fzf (今はWinでは動かさない)
# fzf.vim : ファイルのインクリメンタルサーチ
[[plugins]]
repo = 'junegunn/fzf.vim'
if = '''!has('win32')'''
depends = ['fzf']
hook_add='''
nnoremap <C-o> :FZFFileList<CR>
command! FZFFileList call fzf#run(fzf#wrap({
      \ 'source': 'find . -type d -name .git -prune -o -type f',
      \ 'down': '40%'}))
'''

## fzfのバイナリ
[[plugins]]
repo = 'junegunn/fzf'
if = '''!has('win32')'''
build = './install --all'

# gitの差分表示
[[plugins]]
repo = "airblade/vim-gitgutter"

# deoplete: 補完してくれる君
[[plugins]]
repo = "Shougo/deoplete.nvim"
on_event = 'InsertCharPre'
hook_source = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 0
let g:deoplete#enable_smart_case = 1
let g:deoplete#max_list = 10000
'''

# [[plugins]]
# repo = 'lambdalisue/gina.vim'
# hook_add = '''
# '''

[[plugins]]
repo = 'neoclide/coc.nvim'
on_ft = ['cs']
rev = 'release'
merged = '0'
hook_source = '''
let g:coc_global_extensions=[ 'coc-omnisharp' ]
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_source = '''
autocmd FileType vue syntax sync fromstart
'''

# ターミナル拡張
[[plugins]]
repo = 'vimlab/split-term.vim'
hook_add = '''
set splitbelow
nnoremap <Space>k :20Term<CR>
'''
