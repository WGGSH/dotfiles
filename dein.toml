# --- 各種カラースキーム ---
# カラースキーム集
[[plugins]]
repo = 'flazz/vim-colorschemes'

[[plugins]]
repo = 'niklas-8/vim-darkspace'

# 今使ってるカラースキーム
[[plugins]]
repo = 'tomasiser/vim-code-dark'

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'

[[plugins]]
repo = 'crusoexia/vim-monokai'

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
'''

## nord テーマ
[[plugins]]
repo = 'xero/nord-vim-mod'

[[plugins]]
repo = 'mhartington/oceanic-next'

# --- --- --- --- ---

# Vim用のアイコン
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# Airline
## 本体
[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline/vim-airline-themes', 'tpope/vim-fugitive']
hook_add = '''
" カラースキーム
let g:airline_theme = 'oceanicnext'

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#branch#enabled = 1

" タブ切り替えのキーマップ
nmap <Space>h <Plug>AirlineSelectPrevTab
nmap <Space>t <Plug>AirlineSelectNextTab

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_section_x = '%{strftime("%m/%d %H:%M")}'
" let g:airline_section_d = '%{STL()}'
" let g:airline_section_d = Airline#Section#Create(['%{STL()}'])
" let g:airline_section_c = '%<%<%{airline#extensions#fugitiveline#bufname()}%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#%#__accent_bold#%#__restore__#%{STL()}'


let g:airline_section_c = '%{STL()} %<%<%{airline#extensions#fugitiveline#bufname()}%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#%#__accent_bold#%#__restore__#'

let g:airline_section_z = '%3l:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'

let g:airline#extensions#default#layout = [
 \ [ 'a', 'null', 'b', 'null',  'c'],
 \ [ 'y', 'z', 'x'],
 \ ]

 " セパレータ
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_left_sep= ''
let g:airline_left_alt_sep= ''
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

let g:airline#extensions#tabline#ignore_bufadd_pat = 'gundo|undotree|vimfiler|tagbar|nerd_tree|startify|!'

" エラーシンボル
let g:airline#extensions#ale#error_symbol = ' '
let g:airline#extensions#ale#warning_symbol = ' '
'''

## テーマ
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

## git ブランチ
[[plugins]]
repo = 'tpope/vim-fugitive'

# Processing用プラグイン
[[plugins]]
repo = 'sophacles/vim-processing'
on_ft = ["pde"]

# 自動で閉じ括弧をつける
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

# 不要な空白の強調表示
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

# インデントを見やすくする
[[plugins]]
repo = 'Yggdroot/indentLine'

# コメントの簡易挿入
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
let g:tcomment_mapleader1 = '<C-\>'
'''

# Defx: ファイラー
## 本体
[[plugins]]
repo ='Shougo/defx.nvim'
depends = ['defx-icons']
on_cmd='Defx'
hook_add='''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 1
" nnoremap <silent><Space>. :<C-u>Defx -split=vertical -winwidth=40 -direction=botright<CR>
nnoremap <silent><Space>. :<C-u>Defx<CR>

let s:defx_win_width_percent = 0.7
let s:defx_win_height_percent = 0.5

call defx#custom#option('_', {
      \ 'winwidth': float2nr(&columns * s:defx_win_width_percent),
      \ 'split': 'floating',
      \ 'direction': 'botright',
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ 'toggle': 1,
      \ 'resume': 1,
      \ 'wincol': float2nr((&columns - (&columns * s:defx_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:defx_win_height_percent),
      \ 'winrow': 2,
      " \ 'buffer_name': 'explorer',
      \ })
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  " Define mappings
  " nnoremap <silent><buffer><expr> <CR>
  " \ defx#do_action('open')
  nnoremap <silent><buffer><expr> <CR>
       \ defx#do_action('open_or_close_tree')
  " nnoremap <silent><buffer><expr> c
  " \ defx#do_action('copy')
  " nnoremap <silent><buffer><expr> m
  " \ defx#do_action('move')
  " nnoremap <silent><buffer><expr> p
  " \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> o
        " \ defx#do_action('drop')
        \ defx#do_action('multi', ['drop', 'quit'])
  nnoremap <silent><buffer><expr> e
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  " nnoremap <silent><buffer><expr> D
  " \ defx#do_action('remove')
  " nnoremap <silent><buffer><expr> r
  "      \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr>
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> n
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'h'
  nnoremap <silent><buffer><expr> t
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
  nnoremap <silent><buffer><expr> s
        \ defx#do_action('open', 'vsplit')
endfunction
'''

## アイコン
[[plugins]]
repo = 'kristijanhusak/defx-icons'

## git の status 表示
[[plugins]]
repo ='kristijanhusak/defx-git'
hook_add = '''
let g:defx_git#indicators = {
  \ 'Modified'  : 'ᴍ',
  \ 'Staged'    : '+',
  \ 'Untracked' : '-',
  \ 'Renamed'   : 'ʀ',
  \ 'Unmerged'  : '',
  \ 'Deleted'   : 'ᴅ',
  \ 'Unknown'   : '?'
    \ }
'''

# fzf (今はWinでは動かさない)
# fzf.vim : ファイルのインクリメンタルサーチ
[[plugins]]
repo = 'junegunn/fzf.vim'
if = '''!has('win32')'''
depends = ['fzf']
hook_add='''
nnoremap <Space>r :FZFFileList<CR>
command! FZFFileList call fzf#run(fzf#wrap({
      \ 'source': 'find . -type d -name .git -prune -o -type f',
      \ 'down': '40%'}))
'''

## fzfのバイナリ
[[plugins]]
repo = 'junegunn/fzf'
if = '''!has('win32')'''
build = './install --all'

# gitの差分表示
[[plugins]]
repo = "airblade/vim-gitgutter"

# deoplete: 補完してくれる君

## lsp
[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'

## 本体
[[plugins]]
repo = "Shougo/deoplete.nvim"
on_event = 'InsertCharPre'
hook_add = '''
let g:deoplete#enable_at_startup = 1

" inoremap <expr><C-h> deoplete#smart_close_popup()."<C-h>"
" inoremap <expr><BS> deoplete#smart_close_popup()."<C-h>"

call deoplete#custom#option({
    " \ 'auto_complete': v:true,
    " \ 'min_pattern_length': 2,
    " \ 'auto_complete_delay': 0,
    " \ 'auto_refresh_delay': 20,
    " \ 'refresh_always': v:true,
    " \ 'smart_case': v:true,
    " \ 'camel_case': v:true,
    \ })
let s:use_lsp_sources = ['lsp', 'dictionary', 'file']
call deoplete#custom#option('sources', {
    " \ 'go': s:use_lsp_sources,
    " \ 'python': s:use_lsp_sources,
    " \ 'js': s:use_lsp_sources,
    " \ 'vim': ['vim', 'buffer', 'dictionary', 'file'],
    \})
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# [[plugins]]
# repo = 'lambdalisue/gina.vim'
# hook_add = '''
# '''

# [[plugins]]
# repo = 'neoclide/coc.nvim'
# on_ft = ['cs']
# rev = 'release'
# merged = '0'
# hook_source = '''
# let g:coc_global_extensions=[ 'coc-omnisharp' ]
# '''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_source = '''
autocmd FileType vue syntax sync fromstart
'''

# ターミナル拡張
[[plugins]]
repo = 'vimlab/split-term.vim'
hook_add = '''
set splitbelow
" nnoremap <Space>k :20Term<CR>
'''

# 検索の拡張
[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'
depends = ['haya14busa/incsearch.vim']
hook_add = '''
nmap f <Plug>(incsearch-fuzzy-/)
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'dense-analysis/ale'
on_cmd = ['ALELint', 'ALEToggle', 'ALEEnable', 'ALEToggleBuffer', 'ALEEnableBuffer']
depends = 'asyncomplete.vim'
hook_add = '''
let g:ale_linters_explicit = 1 " 必要なlinterのみ有効化したいため
let g:ale_linters = {
  \   'typescript': ['eslint']
  \   }
let g:ale_fixers = {
  \  'javascript': ['eslint', 'prettier', 'remove_trailing_lines', 'trim_whitespace'],
  \   }
let g:ale_fix_on_save = 1

let g:ale_sign_error =''
let g:ale_sign_warning = ''

function! s:typescript() abort
  ALEEnable
  call asyncomplete#enable_for_buffer()
  map <buffer> <C-]> <Plug>(ale_go_to_definition)
  imap <buffer> <C-y> <Plug>(asyncomplete_force_refresh)
endfunction

augroup TypeScript
  autocmd!
  autocmd FileType typescript call s:typescript()
augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_func = 'asyncomplete#enable_for_buffer'
hook_add = '''
let g:asyncomplete_enable_for_all = 0 " TypeScriptファイルの編集時のみ使用したいため
set completeopt+=preview

autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({
\ 'priority': 10
\ }))
'''

# [[Plugins]]
# repo = 'w0rp/ale'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

let g:asyncomplete_remove_duplicates = 1
let g:asyncomplete_smart_completion = 1
let g:asyncomplete_auto_popup = 1

'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'mattn/vim-lsp-icons'

# [[plugins]]
# repo = 'hrsh7th/vim-vsnip'

# [[plugins]]
# repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'tikhomirov/vim-glsl'
on_ft = ['vs', 'fs']
hook_add = '''
autocmd! BufNewFile,BufRead *.vs,*.fs set ft=glsl
'''

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['js']
hook_source =
'''
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add='''

let s:denite_win_width_percent = 0.7
let s:denite_win_height_percent = 0.5

" Change denite default options
call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': 2,
    \ 'start_filter': v:true,
    \ 'highlight_filter_background': 'DeniteFilter',
    \ })

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  " nnoremap <silent><buffer><expr> d
  " \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> a
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

nnoremap <silent><C-p> :<C-u>Denite file<CR>
nnoremap <silent><C-S-p> :<C-u>Denite command<CR>
nnoremap <silent><C-f> :<C-u>Denite grep<CR>
'''
[[plugins]]
repo = 'Shougo/unite-outline'
[[plugins]]
repo = 'Shougo/neomru.vim'
[[plugins]]
repo = 'Shougo/neoyank.vim'
